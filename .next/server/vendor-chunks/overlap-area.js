"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/overlap-area";
exports.ids = ["vendor-chunks/overlap-area"];
exports.modules = {

/***/ "(ssr)/./node_modules/overlap-area/dist/overlap-area.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/overlap-area/dist/overlap-area.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertLines: () => (/* binding */ convertLines),\n/* harmony export */   findConnectedAreas: () => (/* binding */ findConnectedAreas),\n/* harmony export */   fitPoints: () => (/* binding */ fitPoints),\n/* harmony export */   getAreaSize: () => (/* binding */ getAreaSize),\n/* harmony export */   getDistanceFromPointToConstants: () => (/* binding */ getDistanceFromPointToConstants),\n/* harmony export */   getIntersectionPoints: () => (/* binding */ getIntersectionPoints),\n/* harmony export */   getIntersectionPointsByConstants: () => (/* binding */ getIntersectionPointsByConstants),\n/* harmony export */   getLinearConstants: () => (/* binding */ getLinearConstants),\n/* harmony export */   getMinMaxs: () => (/* binding */ getMinMaxs),\n/* harmony export */   getOverlapAreas: () => (/* binding */ getOverlapAreas),\n/* harmony export */   getOverlapPoints: () => (/* binding */ getOverlapPoints),\n/* harmony export */   getOverlapSize: () => (/* binding */ getOverlapSize),\n/* harmony export */   getPointsOnLines: () => (/* binding */ getPointsOnLines),\n/* harmony export */   getUnoverlapAreas: () => (/* binding */ getUnoverlapAreas),\n/* harmony export */   isInside: () => (/* binding */ isInside),\n/* harmony export */   isPointOnLine: () => (/* binding */ isPointOnLine)\n/* harmony export */ });\n/* harmony import */ var _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @daybrush/utils */ \"(ssr)/./node_modules/@daybrush/utils/dist/utils.esm.js\");\n/*\nCopyright (c) 2020 Daybrush\nname: overlap-area\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/overlap-area.git\nversion: 1.1.0\n*/ \n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\nfunction tinyThrottle(num) {\n    return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.throttle)(num, _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.TINY_NUM);\n}\nfunction isSameConstants(linearConstants1, linearConstants2) {\n    return linearConstants1.every(function(v, i) {\n        return tinyThrottle(v - linearConstants2[i]) === 0;\n    });\n}\nfunction isSamePoint(point1, point2) {\n    return !tinyThrottle(point1[0] - point2[0]) && !tinyThrottle(point1[1] - point2[1]);\n}\nfunction flat(arr) {\n    return arr.reduce(function(prev, current) {\n        prev.push.apply(prev, current);\n        return prev;\n    }, []);\n}\n/**\n * @namespace OverlapArea\n */ /**\n * Gets the size of a shape (polygon) made of points.\n * @memberof OverlapArea\n */ function getAreaSize(points) {\n    if (points.length < 3) {\n        return 0;\n    }\n    return Math.abs((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.sum)(points.map(function(point, i) {\n        var nextPoint = points[i + 1] || points[0];\n        return point[0] * nextPoint[1] - nextPoint[0] * point[1];\n    }))) / 2;\n}\n/**\n * Get points that fit the rect,\n * @memberof OverlapArea\n */ function fitPoints(points, rect) {\n    var width = rect.width, height = rect.height, left = rect.left, top = rect.top;\n    var _a = getMinMaxs(points), minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n    var ratioX = width / (maxX - minX);\n    var ratioY = height / (maxY - minY);\n    return points.map(function(point) {\n        return [\n            left + (point[0] - minX) * ratioX,\n            top + (point[1] - minY) * ratioY\n        ];\n    });\n}\n/**\n * Get the minimum and maximum points of the points.\n * @memberof OverlapArea\n */ function getMinMaxs(points) {\n    var xs = points.map(function(point) {\n        return point[0];\n    });\n    var ys = points.map(function(point) {\n        return point[1];\n    });\n    return {\n        minX: Math.min.apply(Math, xs),\n        minY: Math.min.apply(Math, ys),\n        maxX: Math.max.apply(Math, xs),\n        maxY: Math.max.apply(Math, ys)\n    };\n}\n/**\n * Whether the point is in shape\n * @param - point pos\n * @param - shape points\n * @param - whether to check except line\n * @memberof OverlapArea\n */ function isInside(pos, points, excludeLine) {\n    var x = pos[0], y = pos[1];\n    var _a = getMinMaxs(points), minX = _a.minX, maxX = _a.maxX;\n    var xLine = [\n        [\n            minX,\n            y\n        ],\n        [\n            maxX,\n            y\n        ]\n    ];\n    var xLinearConstants = getLinearConstants(xLine[0], xLine[1]);\n    var lines = convertLines(points);\n    var intersectionPosInfos = [];\n    lines.forEach(function(line) {\n        var linearConstants = getLinearConstants(line[0], line[1]);\n        var standardPoint = line[0];\n        if (isSameConstants(xLinearConstants, linearConstants)) {\n            intersectionPosInfos.push({\n                pos: pos,\n                line: line,\n                type: \"line\"\n            });\n        } else {\n            var xPoints = getPointsOnLines(getIntersectionPointsByConstants(xLinearConstants, linearConstants), [\n                xLine,\n                line\n            ]);\n            xPoints.forEach(function(point) {\n                if (line.some(function(linePoint) {\n                    return isSamePoint(linePoint, point);\n                })) {\n                    intersectionPosInfos.push({\n                        pos: point,\n                        line: line,\n                        type: \"point\"\n                    });\n                } else if (tinyThrottle(standardPoint[1] - y) !== 0) {\n                    intersectionPosInfos.push({\n                        pos: point,\n                        line: line,\n                        type: \"intersection\"\n                    });\n                }\n            });\n        }\n    });\n    if (!excludeLine) {\n        // on line\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.find)(intersectionPosInfos, function(p) {\n            return p[0] === x;\n        })) {\n            return true;\n        }\n    }\n    var intersectionCount = 0;\n    var xMap = {};\n    intersectionPosInfos.forEach(function(_a) {\n        var pos = _a.pos, type = _a.type, line = _a.line;\n        if (pos[0] > x) {\n            return;\n        }\n        if (type === \"intersection\") {\n            ++intersectionCount;\n        } else if (type === \"line\") {\n            return;\n        } else if (type === \"point\") {\n            var point = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.find)(line, function(linePoint) {\n                return linePoint[1] !== y;\n            });\n            var prevValue = xMap[pos[0]];\n            var nextValue = point[1] > y ? 1 : -1;\n            if (!prevValue) {\n                xMap[pos[0]] = nextValue;\n            } else if (prevValue !== nextValue) {\n                ++intersectionCount;\n            }\n        }\n    });\n    return intersectionCount % 2 === 1;\n}\n/**\n * Get distance from point to constants. [a, b, c] (ax + by + c = 0)\n * @return [a, b, c]\n * @memberof OverlapArea\n */ function getDistanceFromPointToConstants(_a, pos) {\n    var a = _a[0], b = _a[1], c = _a[2];\n    return (a * pos[0] + b * pos[1] + c) / (a * a + b * b);\n}\n/**\n * Get the coefficient of the linear function. [a, b, c] (ax + by + c = 0)\n * @return [a, b, c]\n * @memberof OverlapArea\n */ function getLinearConstants(point1, point2) {\n    var x1 = point1[0], y1 = point1[1];\n    var x2 = point2[0], y2 = point2[1]; // ax + by + c = 0\n    // [a, b, c]\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    if (Math.abs(dx) < _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.TINY_NUM) {\n        dx = 0;\n    }\n    if (Math.abs(dy) < _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.TINY_NUM) {\n        dy = 0;\n    } // b > 0\n    // ax + by + c = 0\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    if (!dx) {\n        if (dy) {\n            // -x + 1 = 0\n            a = -1;\n            c = x1;\n        }\n    } else if (!dy) {\n        // y - 1 = 0\n        b = 1;\n        c = -y1;\n    } else {\n        // y = -a(x - x1) + y1\n        // ax + y + a * x1 - y1 = 0\n        a = -dy / dx;\n        b = 1;\n        c = -a * x1 - y1;\n    }\n    return [\n        a,\n        b,\n        c\n    ];\n}\n/**\n * Get intersection points with linear functions.\n * @memberof OverlapArea\n */ function getIntersectionPointsByConstants(linearConstants1, linearConstants2) {\n    var a1 = linearConstants1[0], b1 = linearConstants1[1], c1 = linearConstants1[2];\n    var a2 = linearConstants2[0], b2 = linearConstants2[1], c2 = linearConstants2[2];\n    var isZeroA = a1 === 0 && a2 === 0;\n    var isZeroB = b1 === 0 && b2 === 0;\n    var results = [];\n    if (isZeroA && isZeroB) {\n        return [];\n    } else if (isZeroA) {\n        // b1 * y + c1 = 0\n        // b2 * y + c2 = 0\n        var y1 = -c1 / b1;\n        var y2 = -c2 / b2;\n        if (y1 !== y2) {\n            return [];\n        } else {\n            return [\n                [\n                    -Infinity,\n                    y1\n                ],\n                [\n                    Infinity,\n                    y1\n                ]\n            ];\n        }\n    } else if (isZeroB) {\n        // a1 * x + c1 = 0\n        // a2 * x + c2 = 0\n        var x1 = -c1 / a1;\n        var x2 = -c2 / a2;\n        if (x1 !== x2) {\n            return [];\n        } else {\n            return [\n                [\n                    x1,\n                    -Infinity\n                ],\n                [\n                    x1,\n                    Infinity\n                ]\n            ];\n        }\n    } else if (a1 === 0) {\n        // b1 * y + c1 = 0\n        // y = - c1 / b1;\n        // a2 * x + b2 * y + c2 = 0\n        var y = -c1 / b1;\n        var x = -(b2 * y + c2) / a2;\n        results = [\n            [\n                x,\n                y\n            ]\n        ];\n    } else if (a2 === 0) {\n        // b2 * y + c2 = 0\n        // y = - c2 / b2;\n        // a1 * x + b1 * y + c1 = 0\n        var y = -c2 / b2;\n        var x = -(b1 * y + c1) / a1;\n        results = [\n            [\n                x,\n                y\n            ]\n        ];\n    } else if (b1 === 0) {\n        // a1 * x + c1 = 0\n        // x = - c1 / a1;\n        // a2 * x + b2 * y + c2 = 0\n        var x = -c1 / a1;\n        var y = -(a2 * x + c2) / b2;\n        results = [\n            [\n                x,\n                y\n            ]\n        ];\n    } else if (b2 === 0) {\n        // a2 * x + c2 = 0\n        // x = - c2 / a2;\n        // a1 * x + b1 * y + c1 = 0\n        var x = -c2 / a2;\n        var y = -(a1 * x + c1) / b1;\n        results = [\n            [\n                x,\n                y\n            ]\n        ];\n    } else {\n        // a1 * x + b1 * y + c1 = 0\n        // a2 * x + b2 * y + c2 = 0\n        // b2 * a1 * x + b2 * b1 * y + b2 * c1 = 0\n        // b1 * a2 * x + b1 * b2 * y + b1 * c2 = 0\n        // (b2 * a1 - b1 * a2)  * x = (b1 * c2 - b2 * c1)\n        var x = (b1 * c2 - b2 * c1) / (b2 * a1 - b1 * a2);\n        var y = -(a1 * x + c1) / b1;\n        results = [\n            [\n                x,\n                y\n            ]\n        ];\n    }\n    return results.map(function(result) {\n        return [\n            result[0],\n            result[1]\n        ];\n    });\n}\n/**\n * Get intersection points to the two lines.\n * @memberof OverlapArea\n */ function getIntersectionPoints(line1, line2, isLimit) {\n    var points = getIntersectionPointsByConstants(getLinearConstants(line1[0], line1[1]), getLinearConstants(line2[0], line2[1]));\n    if (isLimit) {\n        return getPointsOnLines(points, [\n            line1,\n            line2\n        ]);\n    }\n    return points;\n}\nfunction isPointOnLine(pos, line) {\n    var linearConstants = getLinearConstants(line[0], line[1]);\n    return tinyThrottle(getDistanceFromPointToConstants(linearConstants, pos)) === 0;\n}\n/**\n * Get the points on the lines (between two points).\n * @memberof OverlapArea\n */ function getPointsOnLines(points, lines) {\n    var minMaxs = lines.map(function(line) {\n        return [\n            0,\n            1\n        ].map(function(order) {\n            return [\n                Math.min(line[0][order], line[1][order]),\n                Math.max(line[0][order], line[1][order])\n            ];\n        });\n    });\n    var results = [];\n    if (points.length === 2) {\n        var _a = points[0], x = _a[0], y = _a[1];\n        if (!tinyThrottle(x - points[1][0])) {\n            /// Math.max(minY1, minY2)\n            var top = Math.max.apply(Math, minMaxs.map(function(minMax) {\n                return minMax[1][0];\n            })); /// Math.min(maxY1, miax2)\n            var bottom = Math.min.apply(Math, minMaxs.map(function(minMax) {\n                return minMax[1][1];\n            }));\n            if (tinyThrottle(top - bottom) > 0) {\n                return [];\n            }\n            results = [\n                [\n                    x,\n                    top\n                ],\n                [\n                    x,\n                    bottom\n                ]\n            ];\n        } else if (!tinyThrottle(y - points[1][1])) {\n            /// Math.max(minY1, minY2)\n            var left = Math.max.apply(Math, minMaxs.map(function(minMax) {\n                return minMax[0][0];\n            })); /// Math.min(maxY1, miax2)\n            var right = Math.min.apply(Math, minMaxs.map(function(minMax) {\n                return minMax[0][1];\n            }));\n            if (tinyThrottle(left - right) > 0) {\n                return [];\n            }\n            results = [\n                [\n                    left,\n                    y\n                ],\n                [\n                    right,\n                    y\n                ]\n            ];\n        }\n    }\n    if (!results.length) {\n        results = points.filter(function(point) {\n            var pointX = point[0], pointY = point[1];\n            return minMaxs.every(function(minMax) {\n                return 0 <= tinyThrottle(pointX - minMax[0][0]) && 0 <= tinyThrottle(minMax[0][1] - pointX) && 0 <= tinyThrottle(pointY - minMax[1][0]) && 0 <= tinyThrottle(minMax[1][1] - pointY);\n            });\n        });\n    }\n    return results.map(function(result) {\n        return [\n            tinyThrottle(result[0]),\n            tinyThrottle(result[1])\n        ];\n    });\n}\n/**\n* Convert two points into lines.\n* @function\n* @memberof OverlapArea\n*/ function convertLines(points) {\n    return __spreadArrays(points.slice(1), [\n        points[0]\n    ]).map(function(point, i) {\n        return [\n            points[i],\n            point\n        ];\n    });\n}\nfunction getOverlapPointInfos(points1, points2) {\n    var targetPoints1 = points1.slice();\n    var targetPoints2 = points2.slice();\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getShapeDirection)(targetPoints1) === -1) {\n        targetPoints1.reverse();\n    }\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getShapeDirection)(targetPoints2) === -1) {\n        targetPoints2.reverse();\n    }\n    var lines1 = convertLines(targetPoints1);\n    var lines2 = convertLines(targetPoints2);\n    var linearConstantsList1 = lines1.map(function(line1) {\n        return getLinearConstants(line1[0], line1[1]);\n    });\n    var linearConstantsList2 = lines2.map(function(line2) {\n        return getLinearConstants(line2[0], line2[1]);\n    });\n    var overlapInfos = [];\n    linearConstantsList1.forEach(function(linearConstants1, i) {\n        var line1 = lines1[i];\n        var linePointInfos = [];\n        linearConstantsList2.forEach(function(linearConstants2, j) {\n            var intersectionPoints = getIntersectionPointsByConstants(linearConstants1, linearConstants2);\n            var points = getPointsOnLines(intersectionPoints, [\n                line1,\n                lines2[j]\n            ]);\n            linePointInfos.push.apply(linePointInfos, points.map(function(pos) {\n                return {\n                    index1: i,\n                    index2: j,\n                    pos: pos,\n                    type: \"intersection\"\n                };\n            }));\n        });\n        linePointInfos.sort(function(a, b) {\n            return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDist)(line1[0], a.pos) - (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDist)(line1[0], b.pos);\n        });\n        overlapInfos.push.apply(overlapInfos, linePointInfos);\n        if (isInside(line1[1], targetPoints2)) {\n            overlapInfos.push({\n                index1: i,\n                index2: -1,\n                pos: line1[1],\n                type: \"inside\"\n            });\n        }\n    });\n    lines2.forEach(function(line2, i) {\n        if (!isInside(line2[1], targetPoints1)) {\n            return;\n        }\n        var isNext = false;\n        var index = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.findIndex)(overlapInfos, function(_a) {\n            var index2 = _a.index2;\n            if (index2 === i) {\n                isNext = true;\n                return false;\n            }\n            if (isNext) {\n                return true;\n            }\n            return false;\n        });\n        if (index === -1) {\n            isNext = false;\n            index = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.findIndex)(overlapInfos, function(_a) {\n                var index1 = _a.index1, index2 = _a.index2;\n                if (index1 === -1 && index2 + 1 === i) {\n                    isNext = true;\n                    return false;\n                }\n                if (isNext) {\n                    return true;\n                }\n                return false;\n            });\n        }\n        if (index === -1) {\n            overlapInfos.push({\n                index1: -1,\n                index2: i,\n                pos: line2[1],\n                type: \"inside\"\n            });\n        } else {\n            overlapInfos.splice(index, 0, {\n                index1: -1,\n                index2: i,\n                pos: line2[1],\n                type: \"inside\"\n            });\n        }\n    });\n    var pointMap = {};\n    return overlapInfos.filter(function(_a) {\n        var pos = _a.pos;\n        var key = pos[0] + \"x\" + pos[1];\n        if (pointMap[key]) {\n            return false;\n        }\n        pointMap[key] = true;\n        return true;\n    });\n}\n/**\n* Get the points of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/ function getOverlapPoints(points1, points2) {\n    var infos = getOverlapPointInfos(points1, points2);\n    return infos.map(function(_a) {\n        var pos = _a.pos;\n        return pos;\n    });\n}\nfunction isConnectedLine(line) {\n    var _a = line[0], prevIndex1 = _a.index1, prevIndex2 = _a.index2, _b = line[1], nextIndex1 = _b.index1, nextIndex2 = _b.index2;\n    if (prevIndex1 !== -1) {\n        // same line\n        if (prevIndex1 === nextIndex1) {\n            return true;\n        }\n        if (prevIndex1 + 1 === nextIndex1) {\n            return true;\n        }\n    }\n    if (prevIndex2 !== -1) {\n        // same line\n        if (prevIndex2 === nextIndex2) {\n            return true;\n        }\n        if (prevIndex2 + 1 === nextIndex2) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n* Get the areas of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/ function getOverlapAreas(points1, points2) {\n    var infos = getOverlapPointInfos(points1, points2);\n    var areas = [];\n    var area;\n    getOverlapPointInfos(points1, points2).forEach(function(info, i, arr) {\n        if (i === 0 || !isConnectedLine([\n            arr[i - 1],\n            info\n        ])) {\n            area = [\n                info\n            ];\n            areas.push(area);\n        } else {\n            area.push(info);\n        }\n    });\n    return areas.map(function(area) {\n        return area.map(function(_a) {\n            var pos = _a.pos;\n            return pos;\n        });\n    });\n}\nfunction findReversedAreas(points1, points2, index, areas) {\n    if (index === void 0) {\n        index = 0;\n    }\n    if (areas === void 0) {\n        areas = [];\n    }\n    var isFirst = areas.length === 0;\n    var length = points1.length;\n    var nextIndex = points1[index] ? index : 0;\n    var nextPoints1 = __spreadArrays(points1.slice(nextIndex), points1.slice(0, nextIndex));\n    var _loop_1 = function(i) {\n        var point1 = nextPoints1[i];\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.find)(points2, function(point2) {\n            return point2[0] === point1[0] && point2[1] === point1[1];\n        })) {\n            return \"continue\";\n        }\n        if (areas.some(function(nextArea) {\n            return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.find)(nextArea, function(areaPoint) {\n                return areaPoint[0] === point1[0] && areaPoint[1] === point1[1];\n            });\n        })) {\n            if (isFirst) {\n                return \"continue\";\n            } else {\n                return \"break\";\n            }\n        }\n        var nextArea = void 0;\n        if (isFirst) {\n            nextArea = [];\n            areas.push(nextArea);\n        } else {\n            nextArea = areas[areas.length - 1];\n        }\n        nextArea.push(point1);\n        var line = [\n            point1,\n            points1[index + 1] || points1[0]\n        ];\n        var nextPoint2 = points2.filter(function(point2) {\n            return isPointOnLine(point2, line);\n        }).sort(function(a, b) {\n            return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDist)(point1, a) - (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDist)(point1, b);\n        })[0];\n        if (!nextPoint2) {\n            findReversedAreas(nextPoints1, points2, i + 1, areas);\n            return \"break\";\n        } else {\n            var point2Index = points2.indexOf(nextPoint2);\n            findReversedAreas(points2, points1, point2Index, areas);\n            if (!isFirst) {\n                return \"break\";\n            }\n        }\n    };\n    for(var i = 0; i < length; ++i){\n        var state_1 = _loop_1(i);\n        if (state_1 === \"break\") break;\n    }\n    return areas;\n}\nfunction findConnectedAreas(points1, points2) {\n    return findReversedAreas(points1, __spreadArrays(points2).reverse());\n}\n/**\n* Get non-overlapping areas of two shapes based on points1.\n* @memberof OverlapArea\n*/ function getUnoverlapAreas(points1, points2) {\n    if (!points2.length) {\n        return [\n            __spreadArrays(points1)\n        ];\n    }\n    var overlapAreas = getOverlapAreas(points1, points2);\n    var unoverlapAreas = [\n        points1\n    ];\n    overlapAreas.forEach(function(overlapArea) {\n        var nextOverlapArea = __spreadArrays(overlapArea).reverse();\n        unoverlapAreas = flat(unoverlapAreas.map(function(area) {\n            var connectedAreas = findReversedAreas(area, nextOverlapArea);\n            var firstConnectedArea = connectedAreas[0];\n            if (connectedAreas.length === 1 && nextOverlapArea.every(function(point) {\n                return firstConnectedArea.indexOf(point) === -1;\n            })) {\n                var lastPoint_1 = firstConnectedArea[firstConnectedArea.length - 1];\n                var firstPoint = __spreadArrays(nextOverlapArea).sort(function(a, b) {\n                    return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDist)(lastPoint_1, a) - (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDist)(lastPoint_1, b);\n                })[0];\n                var firstIndex = nextOverlapArea.indexOf(firstPoint);\n                firstConnectedArea.push.apply(firstConnectedArea, __spreadArrays(nextOverlapArea.slice(firstIndex), nextOverlapArea.slice(0, firstIndex), [\n                    nextOverlapArea[firstIndex],\n                    lastPoint_1\n                ]));\n            }\n            return connectedAreas;\n        }));\n    });\n    return unoverlapAreas;\n}\n/**\n* Gets the size of the overlapped part of two shapes.\n* @function\n* @memberof OverlapArea\n*/ function getOverlapSize(points1, points2) {\n    var points = getOverlapPoints(points1, points2);\n    return getAreaSize(points);\n}\n //# sourceMappingURL=overlap-area.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/overlap-area/dist/overlap-area.esm.js\n");

/***/ })

};
;