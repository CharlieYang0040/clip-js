"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@egjs";
exports.ids = ["vendor-chunks/@egjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@egjs/agent/dist/agent.esm.js":
/*!****************************************************!*\
  !*** ./node_modules/@egjs/agent/dist/agent.esm.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getAccurateAgent: () => (/* binding */ getAccurateAgent),\n/* harmony export */   getLegacyAgent: () => (/* binding */ getLegacyAgent)\n/* harmony export */ });\n/*\nCopyright (c) 2015 NAVER Corp.\nname: @egjs/agent\nlicense: MIT\nauthor: NAVER Corp.\nrepository: git+https://github.com/naver/egjs-agent.git\nversion: 2.4.4\n*/ function some(arr, callback) {\n    var length = arr.length;\n    for(var i = 0; i < length; ++i){\n        if (callback(arr[i], i)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction find(arr, callback) {\n    var length = arr.length;\n    for(var i = 0; i < length; ++i){\n        if (callback(arr[i], i)) {\n            return arr[i];\n        }\n    }\n    return null;\n}\nfunction getUserAgentString(agent) {\n    var userAgent = agent;\n    if (typeof userAgent === \"undefined\") {\n        if (typeof navigator === \"undefined\" || !navigator) {\n            return \"\";\n        }\n        userAgent = navigator.userAgent || \"\";\n    }\n    return userAgent.toLowerCase();\n}\nfunction execRegExp(pattern, text) {\n    try {\n        return new RegExp(pattern, \"g\").exec(text);\n    } catch (e) {\n        return null;\n    }\n}\nfunction hasUserAgentData() {\n    if (typeof navigator === \"undefined\" || !navigator || !navigator.userAgentData) {\n        return false;\n    }\n    var userAgentData = navigator.userAgentData;\n    var brands = userAgentData.brands || userAgentData.uaList;\n    return !!(brands && brands.length);\n}\nfunction findVersion(versionTest, userAgent) {\n    var result = execRegExp(\"(\" + versionTest + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))\", userAgent);\n    return result ? result[3] : \"\";\n}\nfunction convertVersion(text) {\n    return text.replace(/_/g, \".\");\n}\nfunction findPreset(presets, userAgent) {\n    var userPreset = null;\n    var version = \"-1\";\n    some(presets, function(preset) {\n        var result = execRegExp(\"(\" + preset.test + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?\", userAgent);\n        if (!result || preset.brand) {\n            return false;\n        }\n        userPreset = preset;\n        version = result[3] || \"-1\";\n        if (preset.versionAlias) {\n            version = preset.versionAlias;\n        } else if (preset.versionTest) {\n            version = findVersion(preset.versionTest.toLowerCase(), userAgent) || version;\n        }\n        version = convertVersion(version);\n        return true;\n    });\n    return {\n        preset: userPreset,\n        version: version\n    };\n}\nfunction findPresetBrand(presets, brands) {\n    var brandInfo = {\n        brand: \"\",\n        version: \"-1\"\n    };\n    some(presets, function(preset) {\n        var result = findBrand(brands, preset);\n        if (!result) {\n            return false;\n        }\n        brandInfo.brand = preset.id;\n        brandInfo.version = preset.versionAlias || result.version;\n        return brandInfo.version !== \"-1\";\n    });\n    return brandInfo;\n}\nfunction findBrand(brands, preset) {\n    return find(brands, function(_a) {\n        var brand = _a.brand;\n        return execRegExp(\"\" + preset.test, brand.toLowerCase());\n    });\n}\nvar BROWSER_PRESETS = [\n    {\n        test: \"phantomjs\",\n        id: \"phantomjs\"\n    },\n    {\n        test: \"whale\",\n        id: \"whale\"\n    },\n    {\n        test: \"edgios|edge|edg\",\n        id: \"edge\"\n    },\n    {\n        test: \"msie|trident|windows phone\",\n        id: \"ie\",\n        versionTest: \"iemobile|msie|rv\"\n    },\n    {\n        test: \"miuibrowser\",\n        id: \"miui browser\"\n    },\n    {\n        test: \"samsungbrowser\",\n        id: \"samsung internet\"\n    },\n    {\n        test: \"samsung\",\n        id: \"samsung internet\",\n        versionTest: \"version\"\n    },\n    {\n        test: \"chrome|crios\",\n        id: \"chrome\"\n    },\n    {\n        test: \"firefox|fxios\",\n        id: \"firefox\"\n    },\n    {\n        test: \"android\",\n        id: \"android browser\",\n        versionTest: \"version\"\n    },\n    {\n        test: \"safari|iphone|ipad|ipod\",\n        id: \"safari\",\n        versionTest: \"version\"\n    }\n]; // chromium's engine(blink) is based on applewebkit 537.36.\nvar CHROMIUM_PRESETS = [\n    {\n        test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n        id: \"chrome\",\n        versionTest: \"chrome\"\n    },\n    {\n        test: \"chromium\",\n        id: \"chrome\"\n    },\n    {\n        test: \"whale\",\n        id: \"chrome\",\n        versionAlias: \"-1\",\n        brand: true\n    }\n];\nvar WEBKIT_PRESETS = [\n    {\n        test: \"applewebkit\",\n        id: \"webkit\",\n        versionTest: \"applewebkit|safari\"\n    }\n];\nvar WEBVIEW_PRESETS = [\n    {\n        test: \"(?=(iphone|ipad))(?!(.*version))\",\n        id: \"webview\"\n    },\n    {\n        test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n        id: \"webview\"\n    },\n    {\n        // test webview\n        test: \"webview\",\n        id: \"webview\"\n    }\n];\nvar OS_PRESETS = [\n    {\n        test: \"windows phone\",\n        id: \"windows phone\"\n    },\n    {\n        test: \"windows 2000\",\n        id: \"window\",\n        versionAlias: \"5.0\"\n    },\n    {\n        test: \"windows nt\",\n        id: \"window\"\n    },\n    {\n        test: \"win32|windows\",\n        id: \"window\"\n    },\n    {\n        test: \"iphone|ipad|ipod\",\n        id: \"ios\",\n        versionTest: \"iphone os|cpu os\"\n    },\n    {\n        test: \"macos|macintel|mac os x\",\n        id: \"mac\"\n    },\n    {\n        test: \"android|linux armv81\",\n        id: \"android\"\n    },\n    {\n        test: \"tizen\",\n        id: \"tizen\"\n    },\n    {\n        test: \"webos|web0s\",\n        id: \"webos\"\n    }\n];\nfunction isWebView(userAgent) {\n    return !!findPreset(WEBVIEW_PRESETS, userAgent).preset;\n}\nfunction getLegacyAgent(userAgent) {\n    var nextAgent = getUserAgentString(userAgent);\n    var isMobile = !!/mobi/g.exec(nextAgent);\n    var browser = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n        webview: isWebView(nextAgent),\n        chromium: false,\n        chromiumVersion: \"-1\",\n        webkit: false,\n        webkitVersion: \"-1\"\n    };\n    var os = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1\n    };\n    var _a = findPreset(BROWSER_PRESETS, nextAgent), browserPreset = _a.preset, browserVersion = _a.version;\n    var _b = findPreset(OS_PRESETS, nextAgent), osPreset = _b.preset, osVersion = _b.version;\n    var chromiumPreset = findPreset(CHROMIUM_PRESETS, nextAgent);\n    browser.chromium = !!chromiumPreset.preset;\n    browser.chromiumVersion = chromiumPreset.version;\n    if (!browser.chromium) {\n        var webkitPreset = findPreset(WEBKIT_PRESETS, nextAgent);\n        browser.webkit = !!webkitPreset.preset;\n        browser.webkitVersion = webkitPreset.version;\n    }\n    if (osPreset) {\n        os.name = osPreset.id;\n        os.version = osVersion;\n        os.majorVersion = parseInt(osVersion, 10);\n    }\n    if (browserPreset) {\n        browser.name = browserPreset.id;\n        browser.version = browserVersion; // Early whale bugs\n        if (browser.webview && os.name === \"ios\" && browser.name !== \"safari\") {\n            browser.webview = false;\n        }\n    }\n    browser.majorVersion = parseInt(browser.version, 10);\n    return {\n        browser: browser,\n        os: os,\n        isMobile: isMobile,\n        isHints: false\n    };\n}\nfunction getClientHintsAgent(osData) {\n    var userAgentData = navigator.userAgentData;\n    var brands = (userAgentData.uaList || userAgentData.brands).slice();\n    var fullVersionList = osData && osData.fullVersionList;\n    var isMobile = userAgentData.mobile || false;\n    var firstBrand = brands[0];\n    var platform = (osData && osData.platform || userAgentData.platform || navigator.platform).toLowerCase();\n    var browser = {\n        name: firstBrand.brand,\n        version: firstBrand.version,\n        majorVersion: -1,\n        webkit: false,\n        webkitVersion: \"-1\",\n        chromium: false,\n        chromiumVersion: \"-1\",\n        webview: !!findPresetBrand(WEBVIEW_PRESETS, brands).brand || isWebView(getUserAgentString())\n    };\n    var os = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1\n    };\n    browser.webkit = !browser.chromium && some(WEBKIT_PRESETS, function(preset) {\n        return findBrand(brands, preset);\n    });\n    var chromiumBrand = findPresetBrand(CHROMIUM_PRESETS, brands);\n    browser.chromium = !!chromiumBrand.brand;\n    browser.chromiumVersion = chromiumBrand.version || \"-1\";\n    if (!browser.chromium) {\n        var webkitBrand = findPresetBrand(WEBKIT_PRESETS, brands);\n        browser.webkit = !!webkitBrand.brand;\n        browser.webkitVersion = webkitBrand.version || \"-1\";\n    }\n    var platfomResult = find(OS_PRESETS, function(preset) {\n        return new RegExp(\"\" + preset.test, \"g\").exec(platform);\n    });\n    os.name = platfomResult ? platfomResult.id : \"\";\n    if (osData) {\n        os.version = osData.platformVersion || \"-1\";\n    }\n    if (fullVersionList && fullVersionList.length) {\n        var browserBrandByFullVersionList = findPresetBrand(BROWSER_PRESETS, fullVersionList);\n        browser.name = browserBrandByFullVersionList.brand || browser.name;\n        browser.version = browserBrandByFullVersionList.version || browser.version;\n    } else {\n        var browserBrand = findPresetBrand(BROWSER_PRESETS, brands);\n        browser.name = browserBrand.brand || browser.name;\n        browser.version = browserBrand.brand && osData ? osData.uaFullVersion : browserBrand.version;\n    }\n    if (browser.webkit) {\n        os.name = isMobile ? \"ios\" : \"mac\";\n    }\n    if (os.name === \"ios\" && browser.webview) {\n        browser.version = \"-1\";\n    }\n    os.version = convertVersion(os.version);\n    browser.version = convertVersion(browser.version);\n    os.majorVersion = parseInt(os.version, 10);\n    browser.majorVersion = parseInt(browser.version, 10);\n    return {\n        browser: browser,\n        os: os,\n        isMobile: isMobile,\n        isHints: true\n    };\n}\n/**\n * @namespace eg.agent\n */ /**\n* Extracts accuate browser and operating system information from the user agent string or client hints.\n* @ko 유저 에이전트 문자열 또는 client hints에서 정확한 브라우저와 운영체제 정보를 추출한다.\n* @function eg.agent#getAccurateAgent\n* @param - Callback function to get the accuate agent <ko>정확한 에이전트를 가져오기 위한 callback 함수</ko>\n* @return - get the accuate agent promise. If Promise are not supported, null is returned. <ko> 정확한 에이전트 promise를 가져온다. Promise를 지원 하지 않는 경우, null을 반환한다. </ko>\n* @example\nimport { getAccurateAgent } from \"@egjs/agent\";\n// eg.agent.getAccurateAgent()\ngetAccurateAgent().then(agent => {\n   const { os, browser, isMobile } = agent;\n});\ngetAccurateAgent(agent => {\n    const { os, browser, isMobile } = agent;\n});\n*/ function getAccurateAgent(callback) {\n    if (hasUserAgentData()) {\n        return navigator.userAgentData.getHighEntropyValues([\n            \"architecture\",\n            \"model\",\n            \"platform\",\n            \"platformVersion\",\n            \"uaFullVersion\",\n            \"fullVersionList\"\n        ]).then(function(info) {\n            var agentInfo = getClientHintsAgent(info);\n            callback && callback(agentInfo);\n            return agentInfo;\n        });\n    }\n    callback && callback(agent());\n    if (typeof Promise === \"undefined\" || !Promise) {\n        return null;\n    }\n    return Promise.resolve(agent());\n}\n/**\n * Extracts browser and operating system information from the user agent string.\n * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.\n * @function eg.agent#agent\n * @param - user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>\n * @return - agent Info <ko> 에이전트 정보 </ko>\n * @example\nimport agent from \"@egjs/agent\";\n// eg.agent();\nconst { os, browser, isMobile } = agent();\n */ function agent(userAgent) {\n    if (typeof userAgent === \"undefined\" && hasUserAgentData()) {\n        return getClientHintsAgent();\n    } else {\n        return getLegacyAgent(userAgent);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (agent);\n //# sourceMappingURL=agent.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@egjs/agent/dist/agent.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@egjs/children-differ/dist/children-differ.esm.js":
/*!************************************************************************!*\
  !*** ./node_modules/@egjs/children-differ/dist/children-differ.esm.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   diff: () => (/* binding */ diff)\n/* harmony export */ });\n/* harmony import */ var _egjs_list_differ__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @egjs/list-differ */ \"(ssr)/./node_modules/@egjs/list-differ/dist/list-differ.esm.js\");\n/*\nCopyright (c) 2019-present NAVER Corp.\nname: @egjs/children-differ\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-children-differ\nversion: 1.0.1\n*/ \n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n/*\negjs-children-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/ var findKeyCallback = typeof Map === \"function\" ? undefined : function() {\n    var childrenCount = 0;\n    return function(el) {\n        return el.__DIFF_KEY__ || (el.__DIFF_KEY__ = ++childrenCount);\n    };\n}();\n/**\n * A module that checks diff when child are added, removed, or changed .\n * @ko 자식 노드들에서 자식 노드가 추가되거나 삭제되거나 순서가 변경된 사항을 체크하는 모듈입니다.\n * @memberof eg\n * @extends eg.ListDiffer\n */ var ChildrenDiffer = /*#__PURE__*/ function(_super) {\n    __extends(ChildrenDiffer, _super);\n    /**\n   * @param - Initializing Children <ko> 초기 설정할 자식 노드들</ko>\n   */ function ChildrenDiffer(list) {\n        if (list === void 0) {\n            list = [];\n        }\n        return _super.call(this, list, findKeyCallback) || this;\n    }\n    return ChildrenDiffer;\n}(_egjs_list_differ__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n/*\negjs-children-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/ /**\n *\n * @memberof eg.ChildrenDiffer\n * @static\n * @function\n * @param - Previous List <ko> 이전 목록 </ko>\n * @param - List to Update <ko> 업데이트 할 목록 </ko>\n * @return - Returns the diff between `prevList` and `list` <ko> `prevList`와 `list`의 다른 점을 반환한다.</ko>\n * @example\n * import { diff } from \"@egjs/children-differ\";\n * // script => eg.ChildrenDiffer.diff\n * const result = diff([0, 1, 2, 3, 4, 5], [7, 8, 0, 4, 3, 6, 2, 1]);\n * // List before update\n * // [1, 2, 3, 4, 5]\n * console.log(result.prevList);\n * // Updated list\n * // [4, 3, 6, 2, 1]\n * console.log(result.list);\n * // Index array of values added to `list`\n * // [0, 1, 5]\n * console.log(result.added);\n * // Index array of values removed in `prevList`\n * // [5]\n * console.log(result.removed);\n * // An array of index pairs of `prevList` and `list` with different indexes from `prevList` and `list`\n * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n * console.log(result.changed);\n * // The subset of `changed` and an array of index pairs that moved data directly. Indicate an array of absolute index pairs of `ordered`.(Formatted by: Array<[index of prevList, index of list]>)\n * // [[4, 3], [3, 4], [2, 6]]\n * console.log(result.pureChanged);\n * // An array of index pairs to be `ordered` that can synchronize `list` before adding data. (Formatted by: Array<[prevIndex, nextIndex]>)\n * // [[4, 1], [4, 2], [4, 3]]\n * console.log(result.ordered);\n * // An array of index pairs of `prevList` and `list` that have not been added/removed so data is preserved\n * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n * console.log(result.maintained);\n */ function diff(prevList, list) {\n    return (0,_egjs_list_differ__WEBPACK_IMPORTED_MODULE_0__.diff)(prevList, list, findKeyCallback);\n}\n/*\negjs-children-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/ /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChildrenDiffer);\n //# sourceMappingURL=children-differ.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@egjs/children-differ/dist/children-differ.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@egjs/list-differ/dist/list-differ.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@egjs/list-differ/dist/list-differ.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   diff: () => (/* binding */ diff)\n/* harmony export */ });\n/*\nCopyright (c) 2019-present NAVER Corp.\nname: @egjs/list-differ\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-list-differ\nversion: 1.0.1\n*/ /*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/ var PolyMap = /*#__PURE__*/ function() {\n    function PolyMap() {\n        this.keys = [];\n        this.values = [];\n    }\n    var __proto = PolyMap.prototype;\n    __proto.get = function(key) {\n        return this.values[this.keys.indexOf(key)];\n    };\n    __proto.set = function(key, value) {\n        var keys = this.keys;\n        var values = this.values;\n        var prevIndex = keys.indexOf(key);\n        var index = prevIndex === -1 ? keys.length : prevIndex;\n        keys[index] = key;\n        values[index] = value;\n    };\n    return PolyMap;\n}();\n/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/ var HashMap = /*#__PURE__*/ function() {\n    function HashMap() {\n        this.object = {};\n    }\n    var __proto = HashMap.prototype;\n    __proto.get = function(key) {\n        return this.object[key];\n    };\n    __proto.set = function(key, value) {\n        this.object[key] = value;\n    };\n    return HashMap;\n}();\n/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/ var SUPPORT_MAP = typeof Map === \"function\";\n/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/ var Link = /*#__PURE__*/ function() {\n    function Link() {}\n    var __proto = Link.prototype;\n    __proto.connect = function(prevLink, nextLink) {\n        this.prev = prevLink;\n        this.next = nextLink;\n        prevLink && (prevLink.next = this);\n        nextLink && (nextLink.prev = this);\n    };\n    __proto.disconnect = function() {\n        // In double linked list, diconnect the interconnected relationship.\n        var prevLink = this.prev;\n        var nextLink = this.next;\n        prevLink && (prevLink.next = nextLink);\n        nextLink && (nextLink.prev = prevLink);\n    };\n    __proto.getIndex = function() {\n        var link = this;\n        var index = -1;\n        while(link){\n            link = link.prev;\n            ++index;\n        }\n        return index;\n    };\n    return Link;\n}();\n/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/ function orderChanged(changed, fixed) {\n    // It is roughly in the order of these examples.\n    // 4, 6, 0, 2, 1, 3, 5, 7\n    var fromLinks = []; // 0, 1, 2, 3, 4, 5, 6, 7\n    var toLinks = [];\n    changed.forEach(function(_a) {\n        var from = _a[0], to = _a[1];\n        var link = new Link();\n        fromLinks[from] = link;\n        toLinks[to] = link;\n    }); // `fromLinks` are connected to each other by double linked list.\n    fromLinks.forEach(function(link, i) {\n        link.connect(fromLinks[i - 1]);\n    });\n    return changed.filter(function(_, i) {\n        return !fixed[i];\n    }).map(function(_a, i) {\n        var from = _a[0], to = _a[1];\n        if (from === to) {\n            return [\n                0,\n                0\n            ];\n        }\n        var fromLink = fromLinks[from];\n        var toLink = toLinks[to - 1];\n        var fromIndex = fromLink.getIndex(); // Disconnect the link connected to `fromLink`.\n        fromLink.disconnect(); // Connect `fromLink` to the right of `toLink`.\n        if (!toLink) {\n            fromLink.connect(undefined, fromLinks[0]);\n        } else {\n            fromLink.connect(toLink, toLink.next);\n        }\n        var toIndex = fromLink.getIndex();\n        return [\n            fromIndex,\n            toIndex\n        ];\n    });\n}\nvar Result = /*#__PURE__*/ function() {\n    function Result(prevList, list, added, removed, changed, maintained, changedBeforeAdded, fixed) {\n        this.prevList = prevList;\n        this.list = list;\n        this.added = added;\n        this.removed = removed;\n        this.changed = changed;\n        this.maintained = maintained;\n        this.changedBeforeAdded = changedBeforeAdded;\n        this.fixed = fixed;\n    }\n    var __proto = Result.prototype;\n    Object.defineProperty(__proto, \"ordered\", {\n        get: function() {\n            if (!this.cacheOrdered) {\n                this.caculateOrdered();\n            }\n            return this.cacheOrdered;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(__proto, \"pureChanged\", {\n        get: function() {\n            if (!this.cachePureChanged) {\n                this.caculateOrdered();\n            }\n            return this.cachePureChanged;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __proto.caculateOrdered = function() {\n        var ordered = orderChanged(this.changedBeforeAdded, this.fixed);\n        var changed = this.changed;\n        var pureChanged = [];\n        this.cacheOrdered = ordered.filter(function(_a, i) {\n            var from = _a[0], to = _a[1];\n            var _b = changed[i], fromBefore = _b[0], toBefore = _b[1];\n            if (from !== to) {\n                pureChanged.push([\n                    fromBefore,\n                    toBefore\n                ]);\n                return true;\n            }\n        });\n        this.cachePureChanged = pureChanged;\n    };\n    return Result;\n}();\n/**\n *\n * @memberof eg.ListDiffer\n * @static\n * @function\n * @param - Previous List <ko> 이전 목록 </ko>\n * @param - List to Update <ko> 업데이트 할 목록 </ko>\n * @param - This callback function returns the key of the item. <ko> 아이템의 키를 반환하는 콜백 함수입니다.</ko>\n * @return - Returns the diff between `prevList` and `list` <ko> `prevList`와 `list`의 다른 점을 반환한다.</ko>\n * @example\n * import { diff } from \"@egjs/list-differ\";\n * // script => eg.ListDiffer.diff\n * const result = diff([0, 1, 2, 3, 4, 5], [7, 8, 0, 4, 3, 6, 2, 1], e => e);\n * // List before update\n * // [1, 2, 3, 4, 5]\n * console.log(result.prevList);\n * // Updated list\n * // [4, 3, 6, 2, 1]\n * console.log(result.list);\n * // Index array of values added to `list`\n * // [0, 1, 5]\n * console.log(result.added);\n * // Index array of values removed in `prevList`\n * // [5]\n * console.log(result.removed);\n * // An array of index pairs of `prevList` and `list` with different indexes from `prevList` and `list`\n * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n * console.log(result.changed);\n * // The subset of `changed` and an array of index pairs that moved data directly. Indicate an array of absolute index pairs of `ordered`.(Formatted by: Array<[index of prevList, index of list]>)\n * // [[4, 3], [3, 4], [2, 6]]\n * console.log(result.pureChanged);\n * // An array of index pairs to be `ordered` that can synchronize `list` before adding data. (Formatted by: Array<[prevIndex, nextIndex]>)\n * // [[4, 1], [4, 2], [4, 3]]\n * console.log(result.ordered);\n * // An array of index pairs of `prevList` and `list` that have not been added/removed so data is preserved\n * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n * console.log(result.maintained);\n */ function diff(prevList, list, findKeyCallback) {\n    var mapClass = SUPPORT_MAP ? Map : findKeyCallback ? HashMap : PolyMap;\n    var callback = findKeyCallback || function(e) {\n        return e;\n    };\n    var added = [];\n    var removed = [];\n    var maintained = [];\n    var prevKeys = prevList.map(callback);\n    var keys = list.map(callback);\n    var prevKeyMap = new mapClass();\n    var keyMap = new mapClass();\n    var changedBeforeAdded = [];\n    var fixed = [];\n    var removedMap = {};\n    var changed = [];\n    var addedCount = 0;\n    var removedCount = 0; // Add prevKeys and keys to the hashmap.\n    prevKeys.forEach(function(key, prevListIndex) {\n        prevKeyMap.set(key, prevListIndex);\n    });\n    keys.forEach(function(key, listIndex) {\n        keyMap.set(key, listIndex);\n    }); // Compare `prevKeys` and `keys` and add them to `removed` if they are not in `keys`.\n    prevKeys.forEach(function(key, prevListIndex) {\n        var listIndex = keyMap.get(key); // In prevList, but not in list, it is removed.\n        if (typeof listIndex === \"undefined\") {\n            ++removedCount;\n            removed.push(prevListIndex);\n        } else {\n            removedMap[listIndex] = removedCount;\n        }\n    }); // Compare `prevKeys` and `keys` and add them to `added` if they are not in `prevKeys`.\n    keys.forEach(function(key, listIndex) {\n        var prevListIndex = prevKeyMap.get(key); // In list, but not in prevList, it is added.\n        if (typeof prevListIndex === \"undefined\") {\n            added.push(listIndex);\n            ++addedCount;\n        } else {\n            maintained.push([\n                prevListIndex,\n                listIndex\n            ]);\n            removedCount = removedMap[listIndex] || 0;\n            changedBeforeAdded.push([\n                prevListIndex - removedCount,\n                listIndex - addedCount\n            ]);\n            fixed.push(listIndex === prevListIndex);\n            if (prevListIndex !== listIndex) {\n                changed.push([\n                    prevListIndex,\n                    listIndex\n                ]);\n            }\n        }\n    }); // Sort by ascending order of 'to(list's index).\n    removed.reverse();\n    return new Result(prevList, list, added, removed, changed, maintained, changedBeforeAdded, fixed);\n}\n/**\n * A module that checks diff when values are added, removed, or changed in an array.\n * @ko 배열 또는 오브젝트에서 값이 추가되거나 삭제되거나 순서가 변경사항을 체크하는 모듈입니다.\n * @memberof eg\n */ var ListDiffer = /*#__PURE__*/ function() {\n    /**\n   * @param - Initializing Data Array. <ko> 초기 설정할 데이터 배열.</ko>\n   * @param - This callback function returns the key of the item. <ko> 아이템의 키를 반환하는 콜백 함수입니다.</ko>\n   * @example\n   * import ListDiffer from \"@egjs/list-differ\";\n   * // script => eg.ListDiffer\n   * const differ = new ListDiffer([0, 1, 2, 3, 4, 5], e => e);\n   * const result = differ.update([7, 8, 0, 4, 3, 6, 2, 1]);\n   * // List before update\n   * // [1, 2, 3, 4, 5]\n   * console.log(result.prevList);\n   * // Updated list\n   * // [4, 3, 6, 2, 1]\n   * console.log(result.list);\n   * // Index array of values added to `list`.\n   * // [0, 1, 5]\n   * console.log(result.added);\n   * // Index array of values removed in `prevList`.\n   * // [5]\n   * console.log(result.removed);\n   * // An array of index pairs of `prevList` and `list` with different indexes from `prevList` and `list`.\n   * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n   * console.log(result.changed);\n   * // The subset of `changed` and an array of index pairs that moved data directly. Indicate an array of absolute index pairs of `ordered`.(Formatted by: Array<[index of prevList, index of list]>)\n   * // [[4, 3], [3, 4], [2, 6]]\n   * console.log(result.pureChanged);\n   * // An array of index pairs to be `ordered` that can synchronize `list` before adding data. (Formatted by: Array<[prevIndex, nextIndex]>)\n   * // [[4, 1], [4, 2], [4, 3]]\n   * console.log(result.ordered);\n   * // An array of index pairs of `prevList` and `list` that have not been added/removed so data is preserved.\n   * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n   * console.log(result.maintained);\n   */ function ListDiffer(list, findKeyCallback) {\n        if (list === void 0) {\n            list = [];\n        }\n        this.findKeyCallback = findKeyCallback;\n        this.list = [].slice.call(list);\n    }\n    /**\n   * Update list.\n   * @ko 리스트를 업데이트를 합니다.\n   * @param - List to update <ko> 업데이트할 리스트 </ko>\n   * @return - Returns the results of an update from `prevList` to `list`.<ko> `prevList`에서 `list`로 업데이트한 결과를 반환한다. </ko>\n   */ var __proto = ListDiffer.prototype;\n    __proto.update = function(list) {\n        var newData = [].slice.call(list);\n        var result = diff(this.list, newData, this.findKeyCallback);\n        this.list = newData;\n        return result;\n    };\n    return ListDiffer;\n}();\n/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/ /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ListDiffer);\n //# sourceMappingURL=list-differ.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@egjs/list-differ/dist/list-differ.esm.js\n");

/***/ })

};
;