"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@scena";
exports.ids = ["vendor-chunks/@scena"];
exports.modules = {

/***/ "(ssr)/./node_modules/@scena/dragscroll/dist/dragscroll.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@scena/dragscroll/dist/dragscroll.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _scena_event_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @scena/event-emitter */ \"(ssr)/./node_modules/@scena/event-emitter/dist/event-emitter.esm.js\");\n/* harmony import */ var _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @daybrush/utils */ \"(ssr)/./node_modules/@daybrush/utils/dist/utils.esm.js\");\n/*\nCopyright (c) 2019 Daybrush\nname: @scena/dragscroll\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/dragscroll.git\nversion: 1.4.0\n*/ \n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction getDefaultScrollPosition(e) {\n    var container = e.container;\n    if (container === document.body) {\n        return [\n            container.scrollLeft || document.documentElement.scrollLeft,\n            container.scrollTop || document.documentElement.scrollTop\n        ];\n    }\n    return [\n        container.scrollLeft,\n        container.scrollTop\n    ];\n}\nfunction checkDefaultScrollEvent(container, callback) {\n    container.addEventListener(\"scroll\", callback);\n    return function() {\n        container.removeEventListener(\"scroll\", callback);\n    };\n}\nfunction getContainerElement(container) {\n    if (!container) {\n        return null;\n    } else if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(container)) {\n        return document.querySelector(container);\n    }\n    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isFunction)(container)) {\n        return container();\n    } else if (container instanceof Element) {\n        return container;\n    } else if (\"current\" in container) {\n        return container.current;\n    } else if (\"value\" in container) {\n        return container.value;\n    }\n}\n/**\n * @sort 1\n */ var DragScroll = /*#__PURE__*/ function(_super) {\n    __extends(DragScroll, _super);\n    function DragScroll() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._startRect = null;\n        _this._startPos = [];\n        _this._prevTime = 0;\n        _this._timer = 0;\n        _this._prevScrollPos = [\n            0,\n            0\n        ];\n        _this._isWait = false;\n        _this._flag = false;\n        _this._currentOptions = null;\n        _this._lock = false;\n        _this._unregister = null;\n        _this._onScroll = function() {\n            var options = _this._currentOptions;\n            if (_this._lock || !options) {\n                return;\n            }\n            _this.emit(\"scrollDrag\", {\n                next: function(inputEvent) {\n                    _this.checkScroll({\n                        container: options.container,\n                        inputEvent: inputEvent\n                    });\n                }\n            });\n        };\n        return _this;\n    }\n    /**\n   */ var __proto = DragScroll.prototype;\n    __proto.dragStart = function(e, options) {\n        var container = getContainerElement(options.container);\n        if (!container) {\n            this._flag = false;\n            return;\n        }\n        var top = 0;\n        var left = 0;\n        var width = 0;\n        var height = 0;\n        if (container === document.body) {\n            width = window.innerWidth;\n            height = window.innerHeight;\n        } else {\n            var rect = container.getBoundingClientRect();\n            top = rect.top;\n            left = rect.left;\n            width = rect.width;\n            height = rect.height;\n        }\n        this._flag = true;\n        this._startPos = [\n            e.clientX,\n            e.clientY\n        ];\n        this._startRect = {\n            top: top,\n            left: left,\n            width: width,\n            height: height\n        };\n        this._prevScrollPos = this._getScrollPosition([\n            0,\n            0\n        ], options);\n        this._currentOptions = options;\n        this._registerScrollEvent(options);\n    };\n    __proto.drag = function(e, options) {\n        clearTimeout(this._timer);\n        if (!this._flag) {\n            return;\n        }\n        var clientX = e.clientX, clientY = e.clientY;\n        var _a = options.threshold, threshold = _a === void 0 ? 0 : _a;\n        var _b = this, _startRect = _b._startRect, _startPos = _b._startPos;\n        this._currentOptions = options;\n        var direction = [\n            0,\n            0\n        ];\n        if (_startRect.top > clientY - threshold) {\n            if (_startPos[1] > _startRect.top || clientY < _startPos[1]) {\n                direction[1] = -1;\n            }\n        } else if (_startRect.top + _startRect.height < clientY + threshold) {\n            if (_startPos[1] < _startRect.top + _startRect.height || clientY > _startPos[1]) {\n                direction[1] = 1;\n            }\n        }\n        if (_startRect.left > clientX - threshold) {\n            if (_startPos[0] > _startRect.left || clientX < _startPos[0]) {\n                direction[0] = -1;\n            }\n        } else if (_startRect.left + _startRect.width < clientX + threshold) {\n            if (_startPos[0] < _startRect.left + _startRect.width || clientX > _startPos[0]) {\n                direction[0] = 1;\n            }\n        }\n        if (!direction[0] && !direction[1]) {\n            return false;\n        }\n        return this._continueDrag(__assign(__assign({}, options), {\n            direction: direction,\n            inputEvent: e,\n            isDrag: true\n        }));\n    };\n    /**\n   */ __proto.checkScroll = function(options) {\n        var _this = this;\n        if (this._isWait) {\n            return false;\n        }\n        var _a = options.prevScrollPos, prevScrollPos = _a === void 0 ? this._prevScrollPos : _a, direction = options.direction, _b = options.throttleTime, throttleTime = _b === void 0 ? 0 : _b, inputEvent = options.inputEvent, isDrag = options.isDrag;\n        var nextScrollPos = this._getScrollPosition(direction || [\n            0,\n            0\n        ], options);\n        var offsetX = nextScrollPos[0] - prevScrollPos[0];\n        var offsetY = nextScrollPos[1] - prevScrollPos[1];\n        var nextDirection = direction || [\n            offsetX ? Math.abs(offsetX) / offsetX : 0,\n            offsetY ? Math.abs(offsetY) / offsetY : 0\n        ];\n        this._prevScrollPos = nextScrollPos;\n        this._lock = false;\n        if (!offsetX && !offsetY) {\n            return false;\n        }\n        /**\n     * @event DragScroll#move\n     */ this.emit(\"move\", {\n            offsetX: nextDirection[0] ? offsetX : 0,\n            offsetY: nextDirection[1] ? offsetY : 0,\n            inputEvent: inputEvent\n        });\n        if (throttleTime && isDrag) {\n            clearTimeout(this._timer);\n            this._timer = window.setTimeout(function() {\n                _this._continueDrag(options);\n            }, throttleTime);\n        }\n        return true;\n    };\n    /**\n   *\n   */ __proto.dragEnd = function() {\n        this._flag = false;\n        this._lock = false;\n        clearTimeout(this._timer);\n        this._unregisterScrollEvent();\n    };\n    __proto._getScrollPosition = function(direction, options) {\n        var container = options.container, _a = options.getScrollPosition, getScrollPosition = _a === void 0 ? getDefaultScrollPosition : _a;\n        return getScrollPosition({\n            container: getContainerElement(container),\n            direction: direction\n        });\n    };\n    __proto._continueDrag = function(options) {\n        var _this = this;\n        var _a;\n        var container = options.container, direction = options.direction, throttleTime = options.throttleTime, useScroll = options.useScroll, isDrag = options.isDrag, inputEvent = options.inputEvent;\n        if (!this._flag || isDrag && this._isWait) {\n            return;\n        }\n        var nowTime = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.now)();\n        var distTime = Math.max(throttleTime + this._prevTime - nowTime, 0);\n        if (distTime > 0) {\n            clearTimeout(this._timer);\n            this._timer = window.setTimeout(function() {\n                _this._continueDrag(options);\n            }, distTime);\n            return false;\n        }\n        this._prevTime = nowTime;\n        var prevScrollPos = this._getScrollPosition(direction, options);\n        this._prevScrollPos = prevScrollPos;\n        if (isDrag) {\n            this._isWait = true;\n        }\n        // unregister native scroll event\n        if (!useScroll) {\n            this._lock = true;\n        }\n        var param = {\n            container: getContainerElement(container),\n            direction: direction,\n            inputEvent: inputEvent\n        };\n        (_a = options.requestScroll) === null || _a === void 0 ? void 0 : _a.call(options, param);\n        /**\n     * @event DragScroll#scroll\n     */ this.emit(\"scroll\", param);\n        this._isWait = false;\n        return useScroll || this.checkScroll(__assign(__assign({}, options), {\n            prevScrollPos: prevScrollPos,\n            direction: direction,\n            inputEvent: inputEvent\n        }));\n    };\n    __proto._registerScrollEvent = function(options) {\n        this._unregisterScrollEvent();\n        var checkScrollEvent = options.checkScrollEvent;\n        if (!checkScrollEvent) {\n            return;\n        }\n        var callback = checkScrollEvent === true ? checkDefaultScrollEvent : checkScrollEvent;\n        var container = getContainerElement(options.container);\n        if (checkScrollEvent === true && (container === document.body || container === document.documentElement)) {\n            this._unregister = checkDefaultScrollEvent(window, this._onScroll);\n        } else {\n            this._unregister = callback(container, this._onScroll);\n        }\n    };\n    __proto._unregisterScrollEvent = function() {\n        var _a;\n        (_a = this._unregister) === null || _a === void 0 ? void 0 : _a.call(this);\n        this._unregister = null;\n    };\n    return DragScroll;\n}(_scena_event_emitter__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DragScroll); //# sourceMappingURL=dragscroll.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@scena/dragscroll/dist/dragscroll.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@scena/event-emitter/dist/event-emitter.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@scena/event-emitter/dist/event-emitter.esm.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @daybrush/utils */ \"(ssr)/./node_modules/@daybrush/utils/dist/utils.esm.js\");\n/*\nCopyright (c) 2019 Daybrush\nname: @scena/event-emitter\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/gesture.git\nversion: 1.0.5\n*/ \n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n/**\n * Implement EventEmitter on object or component.\n */ var EventEmitter = /*#__PURE__*/ function() {\n    function EventEmitter() {\n        this._events = {};\n    }\n    /**\n   * Add a listener to the registered event.\n   * @param - Name of the event to be added\n   * @param - listener function of the event to be added\n   * @example\n   * import EventEmitter from \"@scena/event-emitter\";\n   * cosnt emitter = new EventEmitter();\n   *\n   * // Add listener in \"a\" event\n   * emitter.on(\"a\", () => {\n   * });\n   * // Add listeners\n   * emitter.on({\n   *  a: () => {},\n   *  b: () => {},\n   * });\n   */ var __proto = EventEmitter.prototype;\n    __proto.on = function(eventName, listener) {\n        if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(eventName)) {\n            for(var name in eventName){\n                this.on(name, eventName[name]);\n            }\n        } else {\n            this._addEvent(eventName, listener, {});\n        }\n        return this;\n    };\n    /**\n   * Remove listeners registered in the event target.\n   * @param - Name of the event to be removed\n   * @param - listener function of the event to be removed\n   * @example\n   * import EventEmitter from \"@scena/event-emitter\";\n   * cosnt emitter = new EventEmitter();\n   *\n   * // Remove all listeners.\n   * emitter.off();\n   *\n   * // Remove all listeners in \"A\" event.\n   * emitter.off(\"a\");\n   *\n   *\n   * // Remove \"listener\" listener in \"a\" event.\n   * emitter.off(\"a\", listener);\n   */ __proto.off = function(eventName, listener) {\n        if (!eventName) {\n            this._events = {};\n        } else if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(eventName)) {\n            for(var name in eventName){\n                this.off(name);\n            }\n        } else if (!listener) {\n            this._events[eventName] = [];\n        } else {\n            var events = this._events[eventName];\n            if (events) {\n                var index = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.findIndex)(events, function(e) {\n                    return e.listener === listener;\n                });\n                if (index > -1) {\n                    events.splice(index, 1);\n                }\n            }\n        }\n        return this;\n    };\n    /**\n   * Add a disposable listener and Use promise to the registered event.\n   * @param - Name of the event to be added\n   * @param - disposable listener function of the event to be added\n   * @example\n   * import EventEmitter from \"@scena/event-emitter\";\n   * cosnt emitter = new EventEmitter();\n   *\n   * // Add a disposable listener in \"a\" event\n   * emitter.once(\"a\", () => {\n   * });\n   *\n   * // Use Promise\n   * emitter.once(\"a\").then(e => {\n   * });\n   */ __proto.once = function(eventName, listener) {\n        var _this = this;\n        if (listener) {\n            this._addEvent(eventName, listener, {\n                once: true\n            });\n        }\n        return new Promise(function(resolve) {\n            _this._addEvent(eventName, resolve, {\n                once: true\n            });\n        });\n    };\n    /**\n   * Fires an event to call listeners.\n   * @param - Event name\n   * @param - Event parameter\n   * @return If false, stop the event.\n   * @example\n   *\n   * import EventEmitter from \"@scena/event-emitter\";\n   *\n   *\n   * const emitter = new EventEmitter();\n   *\n   * emitter.on(\"a\", e => {\n   * });\n   *\n   *\n   * emitter.emit(\"a\", {\n   *   a: 1,\n   * });\n   */ __proto.emit = function(eventName, param) {\n        var _this = this;\n        if (param === void 0) {\n            param = {};\n        }\n        var events = this._events[eventName];\n        if (!eventName || !events) {\n            return true;\n        }\n        var isStop = false;\n        param.eventType = eventName;\n        param.stop = function() {\n            isStop = true;\n        };\n        param.currentTarget = this;\n        __spreadArrays(events).forEach(function(info) {\n            info.listener(param);\n            if (info.once) {\n                _this.off(eventName, info.listener);\n            }\n        });\n        return !isStop;\n    };\n    /**\n   * Fires an event to call listeners.\n   * @param - Event name\n   * @param - Event parameter\n   * @return If false, stop the event.\n   * @example\n   *\n   * import EventEmitter from \"@scena/event-emitter\";\n   *\n   *\n   * const emitter = new EventEmitter();\n   *\n   * emitter.on(\"a\", e => {\n   * });\n   *\n   *\n   * emitter.emit(\"a\", {\n   *   a: 1,\n   * });\n   */ /**\n  * Fires an event to call listeners.\n  * @param - Event name\n  * @param - Event parameter\n  * @return If false, stop the event.\n  * @example\n  *\n  * import EventEmitter from \"@scena/event-emitter\";\n  *\n  *\n  * const emitter = new EventEmitter();\n  *\n  * emitter.on(\"a\", e => {\n  * });\n  *\n  * // emit\n  * emitter.trigger(\"a\", {\n  *   a: 1,\n  * });\n  */ __proto.trigger = function(eventName, param) {\n        if (param === void 0) {\n            param = {};\n        }\n        return this.emit(eventName, param);\n    };\n    __proto._addEvent = function(eventName, listener, options) {\n        var events = this._events;\n        events[eventName] = events[eventName] || [];\n        var listeners = events[eventName];\n        listeners.push(__assign({\n            listener: listener\n        }, options));\n    };\n    return EventEmitter;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EventEmitter); //# sourceMappingURL=event-emitter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@scena/event-emitter/dist/event-emitter.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@scena/matrix/dist/matrix.esm.js":
/*!*******************************************************!*\
  !*** ./node_modules/@scena/matrix/dist/matrix.esm.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculate: () => (/* binding */ calculate),\n/* harmony export */   convertCSStoMatrix: () => (/* binding */ convertCSStoMatrix),\n/* harmony export */   convertDimension: () => (/* binding */ convertDimension),\n/* harmony export */   convertMatrixtoCSS: () => (/* binding */ convertMatrixtoCSS),\n/* harmony export */   convertPositionMatrix: () => (/* binding */ convertPositionMatrix),\n/* harmony export */   createIdentityMatrix: () => (/* binding */ createIdentityMatrix),\n/* harmony export */   createOriginMatrix: () => (/* binding */ createOriginMatrix),\n/* harmony export */   createRotateMatrix: () => (/* binding */ createRotateMatrix),\n/* harmony export */   createScaleMatrix: () => (/* binding */ createScaleMatrix),\n/* harmony export */   createWarpMatrix: () => (/* binding */ createWarpMatrix),\n/* harmony export */   fromTranslation: () => (/* binding */ fromTranslation),\n/* harmony export */   getCenter: () => (/* binding */ getCenter),\n/* harmony export */   getOrigin: () => (/* binding */ getOrigin),\n/* harmony export */   ignoreDimension: () => (/* binding */ ignoreDimension),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   matrix3d: () => (/* binding */ matrix3d),\n/* harmony export */   minus: () => (/* binding */ minus),\n/* harmony export */   multiplies: () => (/* binding */ multiplies),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   plus: () => (/* binding */ plus),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   rotateX3d: () => (/* binding */ rotateX3d),\n/* harmony export */   rotateY3d: () => (/* binding */ rotateY3d),\n/* harmony export */   rotateZ3d: () => (/* binding */ rotateZ3d),\n/* harmony export */   scale3d: () => (/* binding */ scale3d),\n/* harmony export */   translate3d: () => (/* binding */ translate3d),\n/* harmony export */   transpose: () => (/* binding */ transpose)\n/* harmony export */ });\n/* harmony import */ var _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @daybrush/utils */ \"(ssr)/./node_modules/@daybrush/utils/dist/utils.esm.js\");\n/*\nCopyright (c) 2020 Daybrush\nname: @scena/matrix\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/matrix\nversion: 1.1.1\n*/ \nfunction add(matrix, inverseMatrix, startIndex, fromIndex, n, k) {\n    for(var i = 0; i < n; ++i){\n        var x = startIndex + i * n;\n        var fromX = fromIndex + i * n;\n        matrix[x] += matrix[fromX] * k;\n        inverseMatrix[x] += inverseMatrix[fromX] * k;\n    }\n}\nfunction swap(matrix, inverseMatrix, startIndex, fromIndex, n) {\n    for(var i = 0; i < n; ++i){\n        var x = startIndex + i * n;\n        var fromX = fromIndex + i * n;\n        var v = matrix[x];\n        var iv = inverseMatrix[x];\n        matrix[x] = matrix[fromX];\n        matrix[fromX] = v;\n        inverseMatrix[x] = inverseMatrix[fromX];\n        inverseMatrix[fromX] = iv;\n    }\n}\nfunction divide(matrix, inverseMatrix, startIndex, n, k) {\n    for(var i = 0; i < n; ++i){\n        var x = startIndex + i * n;\n        matrix[x] /= k;\n        inverseMatrix[x] /= k;\n    }\n}\n/**\n *\n * @namespace Matrix\n */ /**\n * @memberof Matrix\n */ function ignoreDimension(matrix, m, n) {\n    if (n === void 0) {\n        n = Math.sqrt(matrix.length);\n    }\n    var newMatrix = matrix.slice();\n    for(var i = 0; i < n; ++i){\n        newMatrix[i * n + m - 1] = 0;\n        newMatrix[(m - 1) * n + i] = 0;\n    }\n    newMatrix[(m - 1) * (n + 1)] = 1;\n    return newMatrix;\n}\n/**\n * @memberof Matrix\n */ function invert(matrix, n) {\n    if (n === void 0) {\n        n = Math.sqrt(matrix.length);\n    }\n    var newMatrix = matrix.slice();\n    var inverseMatrix = createIdentityMatrix(n);\n    for(var i = 0; i < n; ++i){\n        // diagonal\n        var identityIndex = n * i + i;\n        if (!(0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.throttle)(newMatrix[identityIndex], _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.TINY_NUM)) {\n            // newMatrix[identityIndex] = 0;\n            for(var j = i + 1; j < n; ++j){\n                if (newMatrix[n * i + j]) {\n                    swap(newMatrix, inverseMatrix, i, j, n);\n                    break;\n                }\n            }\n        }\n        if (!(0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.throttle)(newMatrix[identityIndex], _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.TINY_NUM)) {\n            // no inverse matrix\n            return [];\n        }\n        divide(newMatrix, inverseMatrix, i, n, newMatrix[identityIndex]);\n        for(var j = 0; j < n; ++j){\n            var targetStartIndex = j;\n            var targetIndex = j + i * n;\n            var target = newMatrix[targetIndex];\n            if (!(0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.throttle)(target, _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.TINY_NUM) || i === j) {\n                continue;\n            }\n            add(newMatrix, inverseMatrix, targetStartIndex, i, n, -target);\n        }\n    }\n    return inverseMatrix;\n}\n/**\n * @memberof Matrix\n */ function transpose(matrix, n) {\n    if (n === void 0) {\n        n = Math.sqrt(matrix.length);\n    }\n    var newMatrix = [];\n    for(var i = 0; i < n; ++i){\n        for(var j = 0; j < n; ++j){\n            newMatrix[j * n + i] = matrix[n * i + j];\n        }\n    }\n    return newMatrix;\n}\n/**\n * @memberof Matrix\n */ function getOrigin(matrix, n) {\n    if (n === void 0) {\n        n = Math.sqrt(matrix.length);\n    }\n    var originMatrix = [];\n    var w = matrix[n * n - 1];\n    for(var i = 0; i < n - 1; ++i){\n        originMatrix[i] = matrix[n * (n - 1) + i] / w;\n    }\n    originMatrix[n - 1] = 0;\n    return originMatrix;\n}\n/**\n * @memberof Matrix\n */ function fromTranslation(pos, n) {\n    var newMatrix = createIdentityMatrix(n);\n    for(var i = 0; i < n - 1; ++i){\n        newMatrix[n * (n - 1) + i] = pos[i] || 0;\n    }\n    return newMatrix;\n}\n/**\n * @memberof Matrix\n */ function convertPositionMatrix(matrix, n) {\n    var newMatrix = matrix.slice();\n    for(var i = matrix.length; i < n - 1; ++i){\n        newMatrix[i] = 0;\n    }\n    newMatrix[n - 1] = 1;\n    return newMatrix;\n}\n/**\n * @memberof Matrix\n */ function convertDimension(matrix, n, m) {\n    if (n === void 0) {\n        n = Math.sqrt(matrix.length);\n    } // n < m\n    if (n === m) {\n        return matrix;\n    }\n    var newMatrix = createIdentityMatrix(m);\n    var length = Math.min(n, m);\n    for(var i = 0; i < length - 1; ++i){\n        for(var j = 0; j < length - 1; ++j){\n            newMatrix[i * m + j] = matrix[i * n + j];\n        }\n        newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n        newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n    }\n    newMatrix[m * m - 1] = matrix[n * n - 1];\n    return newMatrix;\n}\n/**\n * @memberof Matrix\n */ function multiplies(n) {\n    var matrixes = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        matrixes[_i - 1] = arguments[_i];\n    }\n    var m = createIdentityMatrix(n);\n    matrixes.forEach(function(matrix) {\n        m = multiply(m, matrix, n);\n    });\n    return m;\n}\n/**\n * @memberof Matrix\n */ function multiply(matrix, matrix2, n) {\n    if (n === void 0) {\n        n = Math.sqrt(matrix.length);\n    }\n    var newMatrix = []; // 1 y: n\n    // 1 x: m\n    // 2 x: m\n    // 2 y: k\n    // n * m X m * k\n    var m = matrix.length / n;\n    var k = matrix2.length / m;\n    if (!m) {\n        return matrix2;\n    } else if (!k) {\n        return matrix;\n    }\n    for(var i = 0; i < n; ++i){\n        for(var j = 0; j < k; ++j){\n            newMatrix[j * n + i] = 0;\n            for(var l = 0; l < m; ++l){\n                // m1 x: m(l), y: n(i)\n                // m2 x: k(j):  y: m(l)\n                // nw x: n(i), y: k(j)\n                newMatrix[j * n + i] += matrix[l * n + i] * matrix2[j * m + l];\n            }\n        }\n    } // n * k\n    return newMatrix;\n}\n/**\n * @memberof Matrix\n */ function plus(pos1, pos2) {\n    var length = Math.min(pos1.length, pos2.length);\n    var nextPos = pos1.slice();\n    for(var i = 0; i < length; ++i){\n        nextPos[i] = nextPos[i] + pos2[i];\n    }\n    return nextPos;\n}\n/**\n * @memberof Matrix\n */ function minus(pos1, pos2) {\n    var length = Math.min(pos1.length, pos2.length);\n    var nextPos = pos1.slice();\n    for(var i = 0; i < length; ++i){\n        nextPos[i] = nextPos[i] - pos2[i];\n    }\n    return nextPos;\n}\n/**\n * @memberof Matrix\n */ function convertCSStoMatrix(a, is2d) {\n    if (is2d === void 0) {\n        is2d = a.length === 6;\n    }\n    if (is2d) {\n        return [\n            a[0],\n            a[1],\n            0,\n            a[2],\n            a[3],\n            0,\n            a[4],\n            a[5],\n            1\n        ];\n    }\n    return a;\n}\n/**\n * @memberof Matrix\n */ function convertMatrixtoCSS(a, is2d) {\n    if (is2d === void 0) {\n        is2d = a.length === 9;\n    }\n    if (is2d) {\n        return [\n            a[0],\n            a[1],\n            a[3],\n            a[4],\n            a[6],\n            a[7]\n        ];\n    }\n    return a;\n}\n/**\n * @memberof Matrix\n */ function calculate(matrix, matrix2, n) {\n    if (n === void 0) {\n        n = matrix2.length;\n    }\n    var result = multiply(matrix, matrix2, n);\n    var k = result[n - 1];\n    return result.map(function(v) {\n        return v / k;\n    });\n}\n/**\n * @memberof Matrix\n */ function rotateX3d(matrix, rad) {\n    return multiply(matrix, [\n        1,\n        0,\n        0,\n        0,\n        0,\n        Math.cos(rad),\n        Math.sin(rad),\n        0,\n        0,\n        -Math.sin(rad),\n        Math.cos(rad),\n        0,\n        0,\n        0,\n        0,\n        1\n    ], 4);\n}\n/**\n * @memberof Matrix\n */ function rotateY3d(matrix, rad) {\n    return multiply(matrix, [\n        Math.cos(rad),\n        0,\n        -Math.sin(rad),\n        0,\n        0,\n        1,\n        0,\n        0,\n        Math.sin(rad),\n        0,\n        Math.cos(rad),\n        0,\n        0,\n        0,\n        0,\n        1\n    ], 4);\n}\n/**\n * @memberof Matrix\n */ function rotateZ3d(matrix, rad) {\n    return multiply(matrix, createRotateMatrix(rad, 4));\n}\n/**\n * @memberof Matrix\n */ function scale3d(matrix, _a) {\n    var _b = _a[0], sx = _b === void 0 ? 1 : _b, _c = _a[1], sy = _c === void 0 ? 1 : _c, _d = _a[2], sz = _d === void 0 ? 1 : _d;\n    return multiply(matrix, [\n        sx,\n        0,\n        0,\n        0,\n        0,\n        sy,\n        0,\n        0,\n        0,\n        0,\n        sz,\n        0,\n        0,\n        0,\n        0,\n        1\n    ], 4);\n}\n/**\n * @memberof Matrix\n */ function rotate(pos, rad) {\n    return calculate(createRotateMatrix(rad, 3), convertPositionMatrix(pos, 3));\n}\n/**\n * @memberof Matrix\n */ function translate3d(matrix, _a) {\n    var _b = _a[0], tx = _b === void 0 ? 0 : _b, _c = _a[1], ty = _c === void 0 ? 0 : _c, _d = _a[2], tz = _d === void 0 ? 0 : _d;\n    return multiply(matrix, [\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        tx,\n        ty,\n        tz,\n        1\n    ], 4);\n}\n/**\n * @memberof Matrix\n */ function matrix3d(matrix1, matrix2) {\n    return multiply(matrix1, matrix2, 4);\n}\n/**\n * @memberof Matrix\n */ function createRotateMatrix(rad, n) {\n    var cos = Math.cos(rad);\n    var sin = Math.sin(rad);\n    var m = createIdentityMatrix(n); // cos -sin\n    // sin cos\n    m[0] = cos;\n    m[1] = sin;\n    m[n] = -sin;\n    m[n + 1] = cos;\n    return m;\n}\n/**\n * @memberof Matrix\n */ function createIdentityMatrix(n) {\n    var length = n * n;\n    var matrix = [];\n    for(var i = 0; i < length; ++i){\n        matrix[i] = i % (n + 1) ? 0 : 1;\n    }\n    return matrix;\n}\n/**\n * @memberof Matrix\n */ function createScaleMatrix(scale, n) {\n    var m = createIdentityMatrix(n);\n    var length = Math.min(scale.length, n - 1);\n    for(var i = 0; i < length; ++i){\n        m[(n + 1) * i] = scale[i];\n    }\n    return m;\n}\n/**\n * @memberof Matrix\n */ function createOriginMatrix(origin, n) {\n    var m = createIdentityMatrix(n);\n    var length = Math.min(origin.length, n - 1);\n    for(var i = 0; i < length; ++i){\n        m[n * (n - 1) + i] = origin[i];\n    }\n    return m;\n}\n/**\n * @memberof Matrix\n */ function createWarpMatrix(pos0, pos1, pos2, pos3, nextPos0, nextPos1, nextPos2, nextPos3) {\n    var x0 = pos0[0], y0 = pos0[1];\n    var x1 = pos1[0], y1 = pos1[1];\n    var x2 = pos2[0], y2 = pos2[1];\n    var x3 = pos3[0], y3 = pos3[1];\n    var u0 = nextPos0[0], v0 = nextPos0[1];\n    var u1 = nextPos1[0], v1 = nextPos1[1];\n    var u2 = nextPos2[0], v2 = nextPos2[1];\n    var u3 = nextPos3[0], v3 = nextPos3[1];\n    var matrix = [\n        x0,\n        0,\n        x1,\n        0,\n        x2,\n        0,\n        x3,\n        0,\n        y0,\n        0,\n        y1,\n        0,\n        y2,\n        0,\n        y3,\n        0,\n        1,\n        0,\n        1,\n        0,\n        1,\n        0,\n        1,\n        0,\n        0,\n        x0,\n        0,\n        x1,\n        0,\n        x2,\n        0,\n        x3,\n        0,\n        y0,\n        0,\n        y1,\n        0,\n        y2,\n        0,\n        y3,\n        0,\n        1,\n        0,\n        1,\n        0,\n        1,\n        0,\n        1,\n        -u0 * x0,\n        -v0 * x0,\n        -u1 * x1,\n        -v1 * x1,\n        -u2 * x2,\n        -v2 * x2,\n        -u3 * x3,\n        -v3 * x3,\n        -u0 * y0,\n        -v0 * y0,\n        -u1 * y1,\n        -v1 * y1,\n        -u2 * y2,\n        -v2 * y2,\n        -u3 * y3,\n        -v3 * y3\n    ];\n    var inverseMatrix = invert(matrix, 8);\n    if (!inverseMatrix.length) {\n        return [];\n    }\n    var h = multiply(inverseMatrix, [\n        u0,\n        v0,\n        u1,\n        v1,\n        u2,\n        v2,\n        u3,\n        v3\n    ], 8);\n    h[8] = 1;\n    return convertDimension(transpose(h), 3, 4);\n}\n/**\n * @memberof Matrix\n */ function getCenter(points) {\n    return [\n        0,\n        1\n    ].map(function(i) {\n        return (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.average)(points.map(function(pos) {\n            return pos[i];\n        }));\n    });\n}\n //# sourceMappingURL=matrix.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@scena/matrix/dist/matrix.esm.js\n");

/***/ })

};
;